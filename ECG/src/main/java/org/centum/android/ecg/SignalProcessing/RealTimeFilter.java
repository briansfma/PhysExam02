package org.centum.android.ecg.SignalProcessing;

/**
 * Created by georgechen on 2/5/15.
 */
public class RealTimeFilter {
    private static final int FILTER_ORDER = 351;
    private static final int FILTER_ORDER_LESS_1 =  350;
    private static final int[] coeff = {-1,-1,0,0,0,-1,-1,-1,0,0,0,-1,-1,0,0,0,-1,-1,-1,0,0,0,
                                        -1,-1,0,0,0,-1,-1,-1,0,0,0,-1,-1,0,0,0,-1,-1,-1,0,0,0,
                                        -1,-1,0,0,0,-1,-1,-1,0,0,0,-1,-1,0,0,0,-1,-1,-1,0,0,0,
                                        -1,-1,0,0,0,-1,-1,-1,0,0,0,-1,-1,0,0,0,-1,-1,-1,0,0,0,
                                        -1,-1,0,0,0,-1,-2,-1,0,0,0,-2,-1,0,1,0,-1,-2,-1,0,1,0,
                                        -2,-2,0,1,0,-1,-2,-1,0,1,-1,-2,-2,0,1,0,-1,-2,-1,1,1,
                                        -1,-2,-2,0,1,1,-2,-3,-1,1,2,-1,-3,-3,0,2,1,-2,-4,-2,2,
                                         3,-1,-4,-4,1,4,2,-3,-6,-2,4,6,-1,-8,-8,2,11,7,-9,-21,
                                        -8,30,74,93,74,30,-8,-21,-9,7,11,2,-8,-8,-1,6,4,-2,-6,
                                        -3,2,4,1,-4,-4,-1,3,2,-2,-4,-2,1,2,0,-3,-3,-1,2,1,-1,-3,
                                        -2,1,1,0,-2,-2,-1,1,1,-1,-2,-1,0,1,0,-2,-2,-1,1,0,-1,-2,
                                        -1,0,1,0,-2,-2,0,1,0,-1,-2,-1,0,1,0,-1,-2,0,0,0,-1,-2,-1,
                                         0,0,0,-1,-1,0,0,0,-1,-1,-1,0,0,0,-1,-1,0,0,0,-1,-1,-1,0,
                                         0,0,-1,-1,0,0,0,-1,-1,-1,0,0,0,-1,-1,0,0,0,-1,-1,-1,0,0,
                                         0,-1,-1,0,0,0,-1,-1,-1,0,0,0,-1,-1,0,0,0,-1,-1,-1,0,0,0,
                                        -1,-1,0,0,0,-1,-1,-1,0,0,0,-1,-1,0,0,0,-1,-1,-1,0,0,0,-1,-1};
    private int[] buffer;

    public RealTimeFilter() {
        buffer = new int[FILTER_ORDER];
    }

    public int get(int sample) {
        int newSamp = sample;
        //println(buffer[FILTER_ORDER_LESS_1]);
        for (int i = 0; i< FILTER_ORDER_LESS_1; i++) {
            buffer[i] = buffer[i+1];
        }
        buffer[FILTER_ORDER_LESS_1] = newSamp;
        //println(buffer[FILTER_ORDER_LESS_1]);
        int filtSamp = 0;
        for (int i = 0; i<FILTER_ORDER; i++) {
            filtSamp +=buffer[i]*coeff[i];
        }
        filtSamp = filtSamp >> 8;
        return filtSamp;
    }
}

/*
class Filter {
  int FILTER_ORDER =  351;
  int FILTER_ORDER_LESS_1 =  350;
  int[] coeff = { -1,-1,0,0,0,-1,-1,-1,0,0,0,-1,-1,0,0,0,-1,-1,-1,0,0,0,
                         -1,-1,0,0,0,-1,-1,-1,0,0,0,-1,-1,0,0,0,-1,-1,-1,0,0,0,
                         -1,-1,0,0,0,-1,-1,-1,0,0,0,-1,-1,0,0,0,-1,-1,-1,0,0,0,
                         -1,-1,0,0,0,-1,-1,-1,0,0,0,-1,-1,0,0,0,-1,-1,-1,0,0,0,
                         -1,-1,0,0,0,-1,-2,-1,0,0,0,-2,-1,0,1,0,-1,-2,-1,0,1,0,
                         -2,-2,0,1,0,-1,-2,-1,0,1,-1,-2,-2,0,1,0,-1,-2,-1,1,1,
                         -1,-2,-2,0,1,1,-2,-3,-1,1,2,-1,-3,-3,0,2,1,-2,-4,-2,2,
                         3,-1,-4,-4,1,4,2,-3,-6,-2,4,6,-1,-8,-8,2,11,7,-9,-21,
                         -8,30,74,93,74,30,-8,-21,-9,7,11,2,-8,-8,-1,6,4,-2,-6,
                         -3,2,4,1,-4,-4,-1,3,2,-2,-4,-2,1,2,0,-3,-3,-1,2,1,-1,-3,
                         -2,1,1,0,-2,-2,-1,1,1,-1,-2,-1,0,1,0,-2,-2,-1,1,0,-1,-2,
                         -1,0,1,0,-2,-2,0,1,0,-1,-2,-1,0,1,0,-1,-2,0,0,0,-1,-2,-1,
                         0,0,0,-1,-1,0,0,0,-1,-1,-1,0,0,0,-1,-1,0,0,0,-1,-1,-1,0,
                         0,0,-1,-1,0,0,0,-1,-1,-1,0,0,0,-1,-1,0,0,0,-1,-1,-1,0,0,
                         0,-1,-1,0,0,0,-1,-1,-1,0,0,0,-1,-1,0,0,0,-1,-1,-1,0,0,0,
                         -1,-1,0,0,0,-1,-1,-1,0,0,0,-1,-1,0,0,0,-1,-1,-1,0,0,0,-1,-1
  };
  int[] buffer;
  Filter() {
    buffer = new int[FILTER_ORDER];
  }
  int get(int sample) {
    //println(buffer[FILTER_ORDER_LESS_1]);
    for (int i = 0; i< FILTER_ORDER_LESS_1; i++) {
      buffer[i] = buffer[i+1];
    }
    buffer[FILTER_ORDER_LESS_1] = int(sample);
    //println(buffer[FILTER_ORDER_LESS_1]);
    int filtSamp = 0;
    for (int i = 0; i<FILTER_ORDER; i++) {
      filtSamp +=buffer[i]*coeff[i];
    }
    filtSamp = filtSamp >> 8;
    return filtSamp;
  }
}
 */